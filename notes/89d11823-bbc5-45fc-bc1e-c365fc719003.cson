createdAt: "2019-11-30T08:23:48.270Z"
updatedAt: "2019-11-30T08:24:52.077Z"
type: "MARKDOWN_NOTE"
folder: "cdf3da13e79e819c8162"
title: "bash"
tags: []
content: '''
  2019/11/28
  ### 在bash中 . 表示在当前shell中执行命令
  例如切换目录指令如果在脚本中写了cd那么表示会另起一个shell在那个shell中cd而不表示在当前shell中切换目录。如果需要在当前目录下按照脚本的路径进行切换目录需要加 . shellscript
  
  2019/11/30
  # bash 
  - 数值测试
  -eq
  等于则为真
  -ne
  不等于则为真
  -gt
  大于则为真
  -ge
  大于等于则为真
  -lt
  小于则为真
  -le
  小于等于则为真
  - 字符串
  =
  等于则为真
  !=
  不相等则为真
  -z 字符串
  字符串的长度为零则为真
  -n 字符串
  字符串的长度不为零则为真
  - 文件
  -e 文件名
  如果文件存在则为真
  -r 文件名
  如果文件存在且可读则为真
  -w 文件名
  如果文件存在且可写则为真
  -x 文件名
  如果文件存在且可执行则为真
  -s 文件名
  如果文件存在且至少有一个字符则为真
  -d 文件名
  如果文件存在且为目录则为真
  -f 文件名
  如果文件存在且为普通文件则为真
  -c 文件名
  如果文件存在且为字符型特殊文件则为真
  -b 文件名
  如果文件存在且为块特殊文件则为真
  - Shell还提供了与( -a )、或( -o )、非( ! )三个逻辑操作符用于将测试条件连接起来，其优先级为："!"最高，"-a"次之，"-o"最低。
  
  - if-then-elseif-else-fi
  ```c
  if condition1
  then
      command1
  elif condition2 
  then 
      command2
  else
      commandN
  fi
  ```
  
  - for 循环
  
  ```c
  /*************************/
  for var in item1 item2 ... itemN
  do
      command1
      command2
      ...
      commandN
  done
  /*************************/
  /*************************/
  //类似于C语言
  for (( ; ; ))
  do
  
  done
  /*************************/
  
  ```
  - while 循环
  ```
  while condition
  do
      command
  done
  ```
  ```
  echo '按下 <CTRL-D> 退出'
  echo -n '输入你最喜欢的网站名: '
  while read FILM
  do
      echo "是的！$FILM 是一个好网站"
  done
  
  ```
  - case
  ```
  case 值 in
  模式1)
      command1
      command2
      ...
      commandN
      ;;
  模式2）
      command1
      command2
      ...
      commandN
      ;;
  esac
  
  ```
  ```
  echo '输入 1 到 4 之间的数字:'
  echo '你输入的数字为:'
  read aNum
  case $aNum in
      1)  echo '你选择了 1'
      ;;
      2)  echo '你选择了 2'
      ;;
      3)  echo '你选择了 3'
      ;;
      4)  echo '你选择了 4'
      ;;
      *)  echo '你没有输入 1 到 4 之间的数字'
      ;;
  esac
  
  ```
  - 函数
  ```
  $#
  传递到脚本的参数个数
  $*
  以一个单字符串显示所有向脚本传递的参数
  $$
  脚本运行的当前进程ID号
  $!
  后台运行的最后一个进程的ID号
  $@
  与$*相同，但是使用时加引号，并在引号中返回每个参数。
  $-
  显示Shell使用的当前选项，与set命令功能相同。
  $?
  显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。
  ```
  
'''
linesHighlighted: []
isStarred: false
isTrashed: false
