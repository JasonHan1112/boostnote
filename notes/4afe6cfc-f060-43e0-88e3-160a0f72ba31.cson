createdAt: "2019-10-11T08:27:35.189Z"
updatedAt: "2019-10-12T09:58:16.001Z"
type: "MARKDOWN_NOTE"
folder: "c34f5c53c8fea0d08916"
title: "poll, select, epoll机制"
tags: []
content: '''
  #poll, select, epoll机制
  ## poll
  - 驱动实现poll
    - 一般是在scull_poll中通过poll_wait添加一个wait_queue_head_t到一个poll_table中，驱动调用poll_wait的时候实际上是调用了__pollwait
  - 用户态使用poll系统调用
  ```c
  struct pollfd {
      int fd;/* file descriptor */
      short events;/* requested events */
      short revents;/* returned events */
  };
  /*例如struct pollfd client[OPEN_MAX]; 用于poll函数第一个参数的数组*/
  int poll(struct pollfd *fds, nfds_t nfds, int timeout);
  ```
  - 内核态系统调用
  ```c
  /*in fs/select.c*/
  SYSCALL_DEFINE3(poll, struct pollfd __user *, ufds, unsigned int, nfds,
  		int, timeout_msecs)
  {
  	struct timespec64 end_time, *to = NULL;
  	int ret;
    
    /*set timeout time, usr time to struct timespec64 *to*/
  	if (timeout_msecs >= 0) {
  		to = &end_time;
  		poll_select_set_timeout(to, timeout_msecs / MSEC_PER_SEC,
  			NSEC_PER_MSEC * (timeout_msecs % MSEC_PER_SEC));
  	}
  
    /*do the realy poll in kernel*/
  	ret = do_sys_poll(ufds, nfds, to);
  
    /*系统调用被中断重新再做一次syscall(do_restart_poll)*/
  	if (ret == -EINTR) {
  		struct restart_block *restart_block;
  
  		restart_block = &current->restart_block;
  		restart_block->fn = do_restart_poll;
  		restart_block->poll.ufds = ufds;
  		restart_block->poll.nfds = nfds;
  
  		if (timeout_msecs >= 0) {
  			restart_block->poll.tv_sec = end_time.tv_sec;
  			restart_block->poll.tv_nsec = end_time.tv_nsec;
  			restart_block->poll.has_timeout = 1;
  		} else
  			restart_block->poll.has_timeout = 0;
  
  		ret = -ERESTART_RESTARTBLOCK;
  	}
  	return ret;
  }
  ```
  do_sys_poll
  ```c
  
  
  
  /*数据结构*/
  struct poll_list {
  	struct poll_list *next;
  	int len;
  	struct pollfd entries[0];//可变长数组
  };
  
  typedef struct poll_table_struct {
  	poll_queue_proc _qproc;//被注册为__pollwait
  	__poll_t _key;
  } poll_table;
  
  struct poll_wqueues {
  	poll_table pt;
  	struct poll_table_page *table;
  	struct task_struct *polling_task;
  	int triggered;
  	int error;
  	int inline_index;
  	struct poll_table_entry inline_entries[N_INLINE_POLL_ENTRIES];
  };
  
  /*逻辑代码*/
  static int do_sys_poll(struct pollfd __user *ufds, unsigned int nfds,
  		struct timespec64 *end_time)
  {
  	struct poll_wqueues table;
   	int err = -EFAULT, fdcount, len, size;
  	/* Allocate small arguments on the stack to save memory and be
  	   faster - use long to make sure the buffer is aligned properly
  	   on 64 bit archs to avoid unaligned access */
  	long stack_pps[POLL_STACK_ALLOC/sizeof(long)];
  	struct poll_list *const head = (struct poll_list *)stack_pps;//存放所有的poll_list
   	struct poll_list *walk = head;//遍历所有的poll_list用
   	unsigned long todo = nfds;//初始化所有的fd的个数
  
  	if (nfds > rlimit(RLIMIT_NOFILE))
  		return -EINVAL;
  
  	len = min_t(unsigned int, nfds, N_STACK_PPS);//设定len为调用poll的app的fd的个数
    /*拷贝所有的struct pollfd到内核空间，其中包括了如果fd较多的情况*/
  	for (;;) {
  		walk->next = NULL;
  		walk->len = len;
  		if (!len)
  			break;
  
      /*将用户空间的struct pollfd拷贝到内核*/
  		if (copy_from_user(walk->entries, ufds + nfds-todo,
  					sizeof(struct pollfd) * walk->len))
  			goto out_fds;
  
  		todo -= walk->len;
  		if (!todo)
  			break;
  
      /*如果struct pollfd较多那么需要多个页来存放，
        下边的代码用来申请多个页将其连成链表形成struct poll_list*/
  		len = min(todo, POLLFD_PER_PAGE);
  		size = sizeof(struct poll_list) + sizeof(struct pollfd) * len;
  		walk = walk->next = kmalloc(size, GFP_KERNEL);
  		if (!walk) {
  			err = -ENOMEM;
  			goto out_fds;
  		}
  	}
  
  	//初始化poll_wqueues各个成员，注册__pollwait(对唤醒函数有注册，后续驱动中调用poll_wait其实就是调该函数)
    poll_initwait(&table);
  	fdcount = do_poll(head, &table, end_time);//do poll
  	poll_freewait(&table);
  
  	for (walk = head; walk; walk = walk->next) {
  		struct pollfd *fds = walk->entries;
  		int j;
  
  		for (j = 0; j < walk->len; j++, ufds++)
  			if (__put_user(fds[j].revents, &ufds->revents))
  				goto out_fds;
    	}
  
  	err = fdcount;
  out_fds:
  	walk = head->next;
  	while (walk) {
  		struct poll_list *pos = walk;
  		walk = walk->next;
  		kfree(pos);
  	}
  
  	return err;
  }
  
  ```
  
  do_poll
  ```c
  static int do_poll(struct poll_list *list, struct poll_wqueues *wait,
  		   struct timespec64 *end_time)
  {
  	poll_table* pt = &wait->pt;
  	ktime_t expire, *to = NULL;
  	int timed_out = 0, count = 0;
  	u64 slack = 0;
  	__poll_t busy_flag = net_busy_loop_on() ? POLL_BUSY_LOOP : 0;
  	unsigned long busy_start = 0;
  
  	/* Optimise the no-wait case */
  	if (end_time && !end_time->tv_sec && !end_time->tv_nsec) {
  		pt->_qproc = NULL;
  		timed_out = 1;
  	}
  
  	if (end_time && !timed_out)
  		slack = select_estimate_accuracy(end_time);
  
  	for (;;) {
  		struct poll_list *walk;
  		bool can_busy_loop = false;
  
      /*对传进来的poll_list进行遍历去做do_pollfd*/
  		for (walk = list; walk != NULL; walk = walk->next) {
  			struct pollfd * pfd, * pfd_end;
  
  			pfd = walk->entries;
  			pfd_end = pfd + walk->len;
  			for (; pfd != pfd_end; pfd++) {
  				/*
  				 * Fish for events. If we found one, record it
  				 * and kill poll_table->_qproc, so we don't
  				 * needlessly register any other waiters after
  				 * this. They'll get immediately deregistered
  				 * when we break out and return.
  				 */
           
           /*在其中会用到pt->_qproc（在该函数中添加等待队列）*/
  				if (do_pollfd(pfd, pt, &can_busy_loop,
  					      busy_flag)) {
  					count++;
  					pt->_qproc = NULL;
  					/* found something, stop busy polling */
  					busy_flag = 0;
  					can_busy_loop = false;
  				}
  			}
  		}
  		/*
  		 * All waiters have already been registered, so don't provide
  		 * a poll_table->_qproc to them on the next loop iteration.
  		 */
  		pt->_qproc = NULL;
  		if (!count) {
  			count = wait->error;
  			if (signal_pending(current))
  				count = -EINTR;
  		}
  		if (count || timed_out)
  			break;
  
  		/* only if found POLL_BUSY_LOOP sockets && not out of time */
  		if (can_busy_loop && !need_resched()) {
  			if (!busy_start) {
  				busy_start = busy_loop_current_time();
  				continue;
  			}
  			if (!busy_loop_timeout(busy_start))
  				continue;
  		}
  		busy_flag = 0;
  
  		/*
  		 * If this is the first loop and we have a timeout
  		 * given, then we convert to ktime_t and set the to
  		 * pointer to the expiry value.
  		 */
  		if (end_time && !to) {
  			expire = timespec64_to_ktime(*end_time);
  			to = &expire;
  		}
  
  		if (!poll_schedule_timeout(wait, TASK_INTERRUPTIBLE, to, slack))
  			timed_out = 1;
  	}
  	return count;
  }
  ```
  
  do_pollfd
  ```c
  static inline __poll_t do_pollfd(struct pollfd *pollfd, poll_table *pwait,
  				     bool *can_busy_poll,
  				     __poll_t busy_flag)
  {
  	int fd = pollfd->fd;
  	__poll_t mask = 0, filter;
  	struct fd f;
  
  	if (fd < 0)
  		goto out;
  	mask = EPOLLNVAL;
  	f = fdget(fd);
  	if (!f.file)
  		goto out;
  
  	/* userland u16 ->events contains POLL... bitmap */
  	filter = demangle_poll(pollfd->events) | EPOLLERR | EPOLLHUP;
  	pwait->_key = filter | busy_flag;
  	mask = vfs_poll(f.file, pwait);//调用驱动中定义的poll
  	if (mask & busy_flag)
  		*can_busy_poll = true;
  	mask &= filter;		/* Mask out unneeded events. */
  	fdput(f);
  
  out:
  	/* ... and so does ->revents */
  	pollfd->revents = mangle_poll(mask);
  	return mask;
  }
  ```
  vfs_poll
  ```c
  
  static inline __poll_t vfs_poll(struct file *file, struct poll_table_struct *pt)
  {
  	if (unlikely(!file->f_op->poll))
  		return DEFAULT_POLLMASK;
  	return file->f_op->poll(file, pt);
  }
  ```
  __pollwait
  ```c
  struct poll_table_entry {
  	struct file *filp;
  	__poll_t key;
  	wait_queue_entry_t wait;
  	wait_queue_head_t *wait_address;
  };
  
  struct poll_wqueues {
  	poll_table pt;
  	struct poll_table_page *table;
  	struct task_struct *polling_task;
  	int triggered;
  	int error;
  	int inline_index;
  	struct poll_table_entry inline_entries[N_INLINE_POLL_ENTRIES];//其中存放wait_queue
  };
  
  /*在驱动.poll中调用poll_wait的时候调用该函数*/
  static void __pollwait(struct file *filp, wait_queue_head_t *wait_address,
  				poll_table *p)
  {
  	struct poll_wqueues *pwq = container_of(p, struct poll_wqueues, pt);
  	struct poll_table_entry *entry = poll_get_entry(pwq);
  	if (!entry)
  		return;
  	entry->filp = get_file(filp);
  	entry->wait_address = wait_address;
  	entry->key = p->_key;
  	init_waitqueue_func_entry(&entry->wait, pollwake);
  	entry->wait.private = pwq;
  	add_wait_queue(wait_address, &entry->wait);
  }
  
  ```
  - 总结
  1. 将用户空间的数据拷贝到内核空间
  2. 在内核空间建立poll_list(存储用户空间fd)和poll_wqueues(poll_table（注册__pollwait）等)
  3. 调用驱动中的poll返回状态
  在每一次进行poll的系统调用的时候都是会遍历所有添加进来的fd，并进行用户空间和内核空间的拷贝
    
  
  
'''
linesHighlighted: []
isStarred: false
isTrashed: false
